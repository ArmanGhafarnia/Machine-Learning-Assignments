# -*- coding: utf-8 -*-
"""ML - 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15aarQqXLgvBRqU5cmpJbBpVsmkBrjCCs
"""

import numpy as np
import pandas as pd
from sklearn.metrics import roc_curve, auc
from sklearn.metrics import accuracy_score, f1_score
from sklearn.preprocessing import OneHotEncoder
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from collections import Counter
import matplotlib.pyplot as plt
from sklearn import svm
from imblearn.under_sampling import RandomUnderSampler
from sklearn.metrics import precision_score, recall_score, confusion_matrix

data_set = pd.read_csv('/content/drive/MyDrive/ML - 2/dataset.csv')    #read table
data_set.head(10)

del data_set['id']
data_set['smoking_status'] = data_set['smoking_status'].fillna("formerly smoked")        #fill empty parts
data_set['bmi'] = data_set['bmi'].fillna(data_set['bmi'].mean())
data_set.head(10)

label_encoder = LabelEncoder()                                               # changing names to values  0,1,2,...
data_set['gender'] = label_encoder.fit_transform(data_set['gender'])

label_encoder = LabelEncoder()
data_set['ever_married'] = label_encoder.fit_transform(data_set['ever_married'])

label_encoder = LabelEncoder()
data_set['work_type'] = label_encoder.fit_transform(data_set['work_type'])

label_encoder = LabelEncoder()
data_set['Residence_type'] = label_encoder.fit_transform(data_set['Residence_type'])

label_encoder = LabelEncoder()
data_set['smoking_status'] = label_encoder.fit_transform(data_set['smoking_status'])


data_set.head(10)

onehot = OneHotEncoder(sparse=False)     # creat onehotencoder we want array not sparse matrix
smoke = onehot.fit_transform(data_set[['smoking_status']])  #convert smoke column to onehot
smoke_column = pd.DataFrame(smoke, columns=onehot.get_feature_names_out(['smoking_status'])) #create new columns from type of smoking
data_set = data_set.drop('smoking_status', axis=1)   #remove the related column     #axis -> column  labels - > row
data_set = pd.concat([smoke_column, data_set], axis=1)  #add new columns to the table



onehot = OneHotEncoder(sparse=False)
gender = onehot.fit_transform(data_set[['gender']])
gender_column = pd.DataFrame(gender, columns=onehot.get_feature_names_out(['gender']))
data_set = data_set.drop('gender', axis=1)
data_set = pd.concat([gender_column, data_set], axis=1)



onehot = OneHotEncoder(sparse=False)
work = onehot.fit_transform(data_set[['work_type']])
work_column = pd.DataFrame(work, columns=onehot.get_feature_names_out(['work_type']))
data_set = data_set.drop('work_type', axis=1)
data_set = pd.concat([work_column, data_set], axis=1)


data_set.head(10)

data_set['avg_glucose_level'] = (data_set['avg_glucose_level'] - data_set['avg_glucose_level'].min())/(data_set['avg_glucose_level'].max() - data_set['avg_glucose_level'].min())
data_set['bmi'] = (data_set['bmi'] - data_set['bmi'].min())/(data_set['bmi'].max() - data_set['bmi'].min())
data_set.head(10)
# normalize values of bmi and avg_glucos

borders = [0, 20, 40, 60, 80 , 100]
values = [0, 2, 4, 6, 8]                                                     # rand the ages
data_set['age'] = pd.cut(data_set['age'], bins=borders, labels=values)

data_set.head(10)

x = data_set.iloc[:,:-1]   #all inputs except last column(predict value)
y = data_set.iloc[:,-1]    #all rows in last column(predict value)

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.1)  #split data_set for learning

undersample = RandomUnderSampler(sampling_strategy='majority') #undersampling
X_new, Y_new = undersample.fit_resample(x_train, y_train)  #mix dataset

model = svm.SVC()            #create model
model.fit(X_new, Y_new)

y_pred = model.predict(x_test)
accuracy = accuracy_score(y_test, y_pred)         #find accuracy
print(accuracy)

y_pred = model.predict(x_test)
f1 = f1_score(y_test, y_pred)         #find f1_score
print(f1)

cmatrix = confusion_matrix(y_test, y_pred)
print(cmatrix)                                    # find confusion matrix